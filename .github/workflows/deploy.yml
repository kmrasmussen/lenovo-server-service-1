# This is the name of the workflow.
name: 'Deploy to Servers'

# This section defines when the workflow will run.
on:
  push:
    branches: [ master ]

# This section defines the jobs to be run.
jobs:
  # 'deploy' is the ID of our job.
  deploy:
    runs-on: ubuntu-latest
    environment: production1
    strategy:
      # This ensures that if one server fails, the others are still attempted.
      fail-fast: false
      # The matrix defines a job for each item in the list.
      matrix:
        server:
          - host: lenovo-ssh.intercebd.com
            user: lenovouser
          - host: dell-ssh.intercebd.com
            user: delluser

    # Steps are the sequence of tasks that will be executed in the job.
    steps:
      # Each step starts with a hyphen '-'.
      - name: Create env file
        # 'run:' is followed by a pipe '|' for a multi-line script.
        # Everything below the pipe must be indented more than 'run:'.
        run: |
          cat > .env << 'EOF'
          DATABASE_URL=${{ secrets.DATABASE_URL }}
          AUTH_SECRET=${{ secrets.AUTH_SECRET }}
          NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }}
          NEXT_PUBLIC_VAPID_PUBLIC_KEY=${{ secrets.NEXT_PUBLIC_VAPID_PUBLIC_KEY }}
          VAPID_PRIVATE_KEY=${{ secrets.VAPID_PRIVATE_KEY }}
          AUTH_GOOGLE_ID=${{ secrets.AUTH_GOOGLE_ID }}
          AUTH_GOOGLE_SECRET=${{ secrets.AUTH_GOOGLE_SECRET }}
          OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
          OPENROUTER_API_KEY=${{ secrets.OPENROUTER_API_KEY }}
          AWS_S3_ACCESS_KEY=${{ secrets.AWS_S3_ACCESS_KEY }}
          AWS_S3_SECRET_ACCESS_KEY=${{ secrets.AWS_S3_SECRET_ACCESS_KEY }}
          AWS_REGION=${{ secrets.AWS_REGION }}
          S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}
          GOOGLE_GEOCODING_API=${{ secrets.GOOGLE_GEOCODING_API }}
          MOONDREAM_API_KEY=${{ secrets.MOONDREAM_API_KEY }}
          GRAFANA_ADMIN_USER=${{ secrets.GRAFANA_ADMIN_USER }}
          GRAFANA_ADMIN_PASSWORD=${{ secrets.GRAFANA_ADMIN_PASSWORD}}
          EOF

      - name: Validate env file
        run: |
          while IFS= read -r line; do
            if [[ $line == *"="* ]]; then
              key=$(echo "$line" | cut -d'=' -f1)
              value=$(echo "$line" | cut -d'=' -f2-)
              if [[ -z "$value" ]]; then
                echo "❌ $key is empty"
                exit 1
              fi
              echo "✅ $key is set"
            fi
          done < .env
      
      - name: Install cloudflared
        run: |
          wget https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb
          sudo dpkg -i cloudflared-linux-amd64.deb
      
      - name: Deploy to ${{ matrix.server.host }}
        env:
          CF_ACCESS_CLIENT_ID: ${{ secrets.CLOUDFLARE_SERVICE_TOKEN_ID }}
          CF_ACCESS_CLIENT_SECRET: ${{ secrets.CLOUDFLARE_SERVICE_TOKEN_SECRET }}
        # The 'run' script block starts here.
        run: |
          # The lines in this script are all indented by 10 spaces.
          echo "${{ secrets.SERVER_SSH_KEY }}" > ssh_key
          chmod 600 ssh_key

          # This variable makes the scp and ssh commands safer and cleaner.
          REMOTE_USER_HOST="${{ matrix.server.user }}@${{ matrix.server.host }}"

          # Transfer the .env file.
          scp -i ssh_key \
              -o StrictHostKeyChecking=no \
              -o ProxyCommand="cloudflared access ssh --hostname ${{ matrix.server.host }}" \
              .env "$REMOTE_USER_HOST:~/."
          
          # This starts the SSH command with a "here document".
          # The script between << 'EOF' and the final EOF will be run on the remote server.
          ssh -i ssh_key \
              -o StrictHostKeyChecking=no \
              -o ServerAliveInterval=60 \
              -o ServerAliveCountMax=10 \
              -o ProxyCommand="cloudflared access ssh --hostname ${{ matrix.server.host }}" \
              "$REMOTE_USER_HOST" << 'EOF'
            # These lines are indented further because they are INSIDE the here-document.
            # This indentation is for readability only; it is not required by the shell.
            set -e
            mkdir -p ~/deployed
            cd ~/deployed/lenovo-server-service-1 || git clone https://github.com/kmrasmussen/lenovo-server-service-1.git ~/deployed/lenovo-server-service-1
            cd ~/deployed/lenovo-server-service-1
            git config pull.rebase true
            git pull origin master
            mv ~/.env .
            docker compose build
            echo "Pre-pulling Docker images..."
            docker compose pull --ignore-pull-failures || true
            docker compose up -d --remove-orphans
            docker image prune -f --filter "dangling=true"
          # CRITICAL: This final 'EOF' marks the end of the ssh script.
          # It MUST be at the beginning of the line, with the same indentation
          # as the 'echo' and 'chmod' commands above it. No spaces before it.
          EOF
